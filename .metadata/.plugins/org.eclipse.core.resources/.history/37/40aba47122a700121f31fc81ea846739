package com.Fluffeater.TimeTraveller;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;

import javax.swing.JFrame;

import com.Fluffeater.TimeTraveller.Graphics.screen;

public class game extends Canvas implements Runnable {

	private static final long serialVersionUID = 1L;
	public static int width = 680;
	public static int height = width / 16 * 9;
	public static int scale = 1;
	public static String version = "Pre-alpha" + serialVersionUID;

	private Thread gamethread;
	private boolean running = false;
	private JFrame Frame;
	
	private screen Screen;

	private BufferedImage image = new BufferedImage(width, height,
			BufferedImage.TYPE_INT_RGB);
	
	private int[] pixels = ((DataBufferInt)image.getRaster().getDataBuffer()).getData();

	public game() {
		Dimension size = new Dimension(width * scale, height * scale);
		setPreferredSize(size);

		Screen = new screen(width,height);
		
		Frame = new JFrame();
	}

	public synchronized void start() {
		running = true;
		gamethread = new Thread(this, "Display");
		gamethread.start();
	}

	public synchronized void stop() {
		try {
			gamethread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		game Game = new game();

		Game.Frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		Game.Frame.setTitle("TimeTraveller " + version);
		Game.Frame.setResizable(false);
		Game.Frame.add(Game);
		Game.Frame.pack();
		Game.Frame.setLocationRelativeTo(null);
		Game.Frame.setVisible(true);

		Game.start();

	}

	public void run() {
		while (running) {
			tick();
			render();
		}
	}

	public void render() {
		BufferStrategy Buffer = getBufferStrategy();
		if (Buffer == null) {
			createBufferStrategy(3);
			return;
		}
		
		Screen.render();
		
		for(int i = 0; i < pixels.length; i++){
			pixels[i] = Screen.pixels[i];
		}

		Graphics g = Buffer.getDrawGraphics();
		draw(g);
		g.dispose();
		Buffer.show();
	}

	public void draw(Graphics g) {
		g.drawImage(image, 0, 0, width, height, null);
	}

	public void tick() {

	}

}